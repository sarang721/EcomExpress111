{"ast":null,"code":"import axios from \"axios\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: 'USER_LOGIN_REQUEST'\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: 'USER_LOGIN_SUCCESS',\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: 'USER_LOGIN_FAIL',\n      payload: error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: \"USER_LOGOUT\"\n  });\n  dispatch({\n    type: 'ORDER_LIST_MY_RESET'\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: 'USER_REGISTER_REQUEST'\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: 'USER_REGISTER_SUCCESS',\n      payload: data\n    });\n    dispatch({\n      type: 'USER_LOGIN_SUCCESS',\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: 'USER_RESGISTER_FAIL',\n      payload: error.message\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'USER_LIST_REQUEST'\n    });\n    const {\n      userLogin: userInfo\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    dispatch({\n      type: 'USER_LIST_SUCCESS',\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: 'USER_RESGISTER_FAIL',\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/MERN Ecommerce/frontend/src/actions/userActions.js"],"names":["axios","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","message","logout","removeItem","register","name","listUsers","getState","userLogin","userInfo","Authorization","token"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: 'USER_LOGIN_REQUEST',\r\n      })\r\n  \r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.post(\r\n        '/api/users/login',\r\n        { email, password },\r\n        config\r\n      )\r\n  \r\n      dispatch({\r\n        type: 'USER_LOGIN_SUCCESS',\r\n        payload: data,\r\n      })\r\n  \r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'USER_LOGIN_FAIL',\r\n        payload:error.message\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  export const logout=()=>(dispatch)=>{\r\n\r\n    localStorage.removeItem('userInfo');\r\n    dispatch({\r\n      type:\"USER_LOGOUT\"\r\n    })\r\n\r\n    dispatch({\r\n      type:'ORDER_LIST_MY_RESET'\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  export const register = (name,email, password) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: 'USER_REGISTER_REQUEST',\r\n      })\r\n  \r\n      const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.post(\r\n        '/api/users',\r\n        {name, email, password },\r\n        config\r\n      )\r\n  \r\n      dispatch({\r\n        type: 'USER_REGISTER_SUCCESS',\r\n        payload: data,\r\n      })\r\n\r\n      dispatch({\r\n        type:'USER_LOGIN_SUCCESS',\r\n        payload:data\r\n      })\r\n  \r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'USER_RESGISTER_FAIL',\r\n        payload:error.message\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n\r\n  export const listUsers = () => async (dispatch,getState) => {\r\n    try {\r\n      dispatch({\r\n        type: 'USER_LIST_REQUEST',\r\n      })\r\n\r\n      const {userLogin:userInfo}=getState();\r\n\r\n  \r\n      const config = {\r\n        headers: {\r\n          Authorization:`Bearer ${userInfo.token}`\r\n        },\r\n      }\r\n  \r\n      \r\n  \r\n      dispatch({\r\n        type: 'USER_LIST_SUCCESS',\r\n        payload: data,\r\n      })\r\n  \r\n      localStorage.setItem('userInfo', JSON.stringify(data))\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'USER_RESGISTER_FAIL',\r\n        payload:error.message\r\n      })\r\n    }\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}